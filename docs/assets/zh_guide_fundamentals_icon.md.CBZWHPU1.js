import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.B2IAv3se.js";const n="/react-antd-admin/docs/assets/how-to-get-remix-icon.CiomNue5.png",g=JSON.parse('{"title":"图标","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/fundamentals/icon.md","filePath":"zh/guide/fundamentals/icon.md","lastUpdated":1752993246000}'),l={name:"zh/guide/fundamentals/icon.md"};function o(r,i,h,p,c,d){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="icon" tabindex="-1">图标 <a class="header-anchor" href="#icon" aria-label="Permalink to &quot;图标 {#icon}&quot;">​</a></h1><h2 id="为什么使用-svg" tabindex="-1">为什么使用 SVG？ <a class="header-anchor" href="#为什么使用-svg" aria-label="Permalink to &quot;为什么使用 SVG？&quot;">​</a></h2><ul><li>Tree Shaking，只打包使用的图标。</li><li>支持多色图标。</li><li>矢量可无限缩放。</li><li>无兼容性问题。</li><li>轻量级，文件小。</li><li>支持像字体那样，通过 font-size，color 来调整样式。</li></ul><h2 id="项目支持的图标库" tabindex="-1">项目支持的图标库？ <a class="header-anchor" href="#项目支持的图标库" aria-label="Permalink to &quot;项目支持的图标库？&quot;">​</a></h2><h3 id="ant-design-图标库" tabindex="-1">ant design 图标库 <a class="header-anchor" href="#ant-design-图标库" aria-label="Permalink to &quot;ant design 图标库&quot;">​</a></h3><p>项目默认安装 <code>@ant-design/icons</code>，可以直接使用 <a href="https://github.com/ant-design/ant-design-icons" target="_blank" rel="noreferrer">Ant Design Icons</a> 提供的图标：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	HomeOutlined,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	SettingFilled,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	SmileOutlined,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ant-design/icons&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;HomeOutlined /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;SettingFilled /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;SmileOutlined /&gt;</span></span></code></pre></div><p>更多图标和用法请查看 <a href="https://ant.design/components/icon-cn" target="_blank" rel="noreferrer">Ant Design Icons</a> 官网。</p><h3 id="remixicon-图标库" tabindex="-1">RemixIcon 图标库 <a class="header-anchor" href="#remixicon-图标库" aria-label="Permalink to &quot;RemixIcon 图标库&quot;">​</a></h3><p>项目安装了 <a href="https://www.npmjs.com/package/@iconify-json/ri" target="_blank" rel="noreferrer"><code>@iconify-json/ri</code></a> 图标库，RemixIcon 图标可直接在项目中使用，点击查看 <a href="https://remixicon.com/" target="_blank" rel="noreferrer">https://remixicon.com/</a> 支持的图标</p><p>使用方式:</p><ol><li>打开<a href="https://remixicon.com/" target="_blank" rel="noreferrer">官网</a>，搜索图标，复制图标名</li></ol><p>例如在官网搜索 sun 图标，点击理想的图标可以看到浏览器地址栏图标的 URL 地址：<a href="https://remixicon.com/icon/sun-line" target="_blank" rel="noreferrer">https://remixicon.com/icon/sun-line</a></p><p><img src="`+n+`" alt="how-to-get-remix-icon"></p><ol start="2"><li>引入图标</li></ol><blockquote><p>~icons 是写死的虚拟路径，ri 是 RemixIcon 的缩写，后面跟上图标名即可。例如：ri/sun-line</p></blockquote><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SunLineIcon </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;~icons/ri/sun-line&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ol start="3"><li>组件中使用</li></ol><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SunLineIcon</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text-3xl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SunLineIcon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span></code></pre></div><h2 id="如何使用其他图标库" tabindex="-1">如何使用其他图标库？ <a class="header-anchor" href="#如何使用其他图标库" aria-label="Permalink to &quot;如何使用其他图标库？&quot;">​</a></h2><p>如果要使用其他图标库，例如 <a href="https://github.com/Templarian/MaterialDesign" target="_blank" rel="noreferrer">mdi</a> 图标库：</p><ol><li>安装图标库 <code>npm install @iconify-json/mdi</code></li><li><strong>可选择</strong>在 <code>src/icons</code> 下创建 mdi 文件，所有使用的图标在此导出。</li></ol><blockquote><p>点击 <a href="https://github.com/iconify/icon-sets" target="_blank" rel="noreferrer">https://github.com/iconify/icon-sets</a> 查看支持的图标库。</p></blockquote><p>如果你想要获取 Iconify 支持的所有图标库，可以直接安装 <code>@iconify/json</code>，这样就可以使用 Iconify 支持的所有图标库了。</p><blockquote><p>注意因为 <code>@iconify/json</code> 包含所有的图标库，npm 下载依赖的时候会比较慢，耐心等待即可。</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @iconify/json</span></span></code></pre></div><h2 id="如何自定义图标" tabindex="-1">如何自定义图标？ <a class="header-anchor" href="#如何自定义图标" aria-label="Permalink to &quot;如何自定义图标？&quot;">​</a></h2><p>在 <code>src/icons</code> 下新建一个 svg 文件夹，所有的 SVG 文件放在这个目录下，然后在 <code>src/icons/index.tsx</code> 中导出即可，例如：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/icons/index.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExternalIcon } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;~icons/svg/external&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><blockquote><p>如果想要修改存放 SVG 文件的文件夹名称，即 <code>~icons/svg/user-settings</code> 路径的 svg，可以在 <code>vite.config.ts</code> 文件中找到 <code>unplugin-icons/vite</code> 插件的配置进行修改。</p></blockquote><p>其他文件中使用这个图标：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ExternalIcon } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#src/icons&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 图标自动响应设置的字体和文字颜色</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;ExternalIcon className=&quot;text-xl&quot; /&gt;</span></span></code></pre></div><h2 id="如何管理项目中的-svg-图标" tabindex="-1">如何管理项目中的 SVG 图标？ <a class="header-anchor" href="#如何管理项目中的-svg-图标" aria-label="Permalink to &quot;如何管理项目中的 SVG 图标？&quot;">​</a></h2><p>UI 设计师给提供的图标全部放在 <code>src/icons/svg</code> 目录下，在放到项目之前，如何管理这些图标呢？</p><p>推荐下面两个在线网站进行项目管理，UI 可以方便上传项目 SVG 文件，开发人员也可以方便下载：</p><blockquote><p>十分推荐 <a href="https://www.iconfont.cn/" target="_blank" rel="noreferrer">iconfont</a> 作为项目管理工具，老品牌值得信赖。</p></blockquote><ol><li><a href="https://www.iconfont.cn/" target="_blank" rel="noreferrer">iconfont</a></li><li><a href="https://bytedance.larkoffice.com/wiki/wikcnrOVHCJQ4V3a7mDvmLjrePf" target="_blank" rel="noreferrer">IconPark</a></li></ol><p>当然也可以不使用上面的在线管理工具，比如 UI 在类似 Figma 这种设计软件中维护一个项目，分享给团队成员也是可以的。</p><h2 id="为什么使用-iconify-引入图标" tabindex="-1">为什么使用 Iconify 引入图标 <a class="header-anchor" href="#为什么使用-iconify-引入图标" aria-label="Permalink to &quot;为什么使用 Iconify 引入图标&quot;">​</a></h2><p>每个图标提供商都以自己的方式提供图标组件，项目中使用多种图标库时，需要以完全不同的方式引入图标，一是引入方式较为繁琐，二是无法随意使用任意提供商的图标库，使用 Iconify 则可以做到引入一个技术方案，使用所有图标库。</p><p>查看 <a href="https://iconify.design" target="_blank" rel="noreferrer">Iconify</a> 官网了解更多。</p><h2 id="为什么不使用在线版-iconify" tabindex="-1">为什么不使用在线版 Iconify？ <a class="header-anchor" href="#为什么不使用在线版-iconify" aria-label="Permalink to &quot;为什么不使用在线版 Iconify？&quot;">​</a></h2><p>Iconify 推荐使用方式是<strong>在线加载</strong>，用户初次打开页面时，会自动加载项目中使用的图标库并存储在本地（localStorage），后续加载图标时无需再次请求。但这次存在两个问题：</p><ol><li>图标闪烁，图标请求服务器存在延迟，用户会先看到一个空白区域，然后图标才出现。</li><li>Iconify 服务器不可靠，用爱发电的捉着很可能哪天就没钱了，基于项目稳健性考虑，不应该在项目的正式环境中使用 Iconify 的服务器。</li></ol><p>基于以上两个重要的原因，<strong>选择图标捆绑项目，一起动态打包</strong>，核心原理使用 <a href="https://github.com/antfu/unplugin-icons" target="_blank" rel="noreferrer">unplugin-icons</a> 插件进行动态打包。</p><h2 id="svg-文件的预览和编辑" tabindex="-1">SVG 文件的预览和编辑 <a class="header-anchor" href="#svg-文件的预览和编辑" aria-label="Permalink to &quot;SVG 文件的预览和编辑&quot;">​</a></h2><p>推荐安装 VSCode 插件 —— <a href="https://marketplace.visualstudio.com/items?itemName=jock.svg" target="_blank" rel="noreferrer">jock.svg</a>，可以方便的本地预览和编辑 SVG 文件。</p><h2 id="svg-作为图片" tabindex="-1">SVG 作为图片？ <a class="header-anchor" href="#svg-作为图片" aria-label="Permalink to &quot;SVG 作为图片？&quot;">​</a></h2><p>假如一个 SVG 文件不是图标，仅仅作为图片使用，使用 image 标签或者 SVG 标签直接插入到 HTML 中，需要注意这个文件应该放在 <code>src/assets/svg</code> 目录下。</p><p>在代码中这样使用：</p><h3 id="作为组件使用" tabindex="-1">作为组件使用 <a class="header-anchor" href="#作为组件使用" aria-label="Permalink to &quot;作为组件使用&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#src/assets/svg/logo.svg?react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;Logo /&gt;</span></span></code></pre></div><h3 id="作为-img-标签的地址" tabindex="-1">作为 img 标签的地址 <a class="header-anchor" href="#作为-img-标签的地址" aria-label="Permalink to &quot;作为 img 标签的地址&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#src/assets/svg/logo.svg?url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;img src={logo} alt=&quot;logo&quot; /&gt;</span></span></code></pre></div><p>以上功能底层使用了 <a href="https://react-svgr.com/docs/getting-started" target="_blank" rel="noreferrer">svgr</a> ，且默认开启了压缩，并使用了一下插件来优化和呈现 SVG 文件：</p><ol><li><a href="https://github.com/pd4d10/vite-plugin-svgr" target="_blank" rel="noreferrer">vite-plugin-svgr</a></li><li><code>@svgr/plugin-jsx</code> 和 <code>@svgr/plugin-svgo</code></li></ol><h2 id="为什么不使用图标精灵" tabindex="-1">为什么不使用图标精灵？ <a class="header-anchor" href="#为什么不使用图标精灵" aria-label="Permalink to &quot;为什么不使用图标精灵？&quot;">​</a></h2><p>如果你喜欢图标精灵，那么可以使用 <a href="https://github.com/vbenjs/vite-plugin-svg-icons" target="_blank" rel="noreferrer">vite-plugin-svg-icons</a> 插件来实现图标精灵，但有以下缺点：</p><ol><li>图标精灵文件过大，即使只使用一个图标也需要下载整个图标精灵文件。</li></ol><h2 id="为什么不使用-unicode、font-class-的方式引用图标" tabindex="-1">为什么不使用 Unicode、font-class 的方式引用图标？ <a class="header-anchor" href="#为什么不使用-unicode、font-class-的方式引用图标" aria-label="Permalink to &quot;为什么不使用 Unicode、font-class 的方式引用图标？&quot;">​</a></h2><p>在 SVG 广泛应用之前，Unicode 引用图标的方式（或者它的变体 font-class 方式）是最为流行的，但不可避免的存在以下缺点：</p><ol><li>图标字体文件过大，字体文件通常包含上百个图标，即使只使用一个图标也需要下载整个字体文件。</li><li>图标字体文件不支持多色，只能单色显示。</li><li>Unicode 图标的书写方式难以记忆，书写效率低。</li><li>字体文件可能阻塞渲染。</li><li>可能存在类名冲突的风险。</li></ol><p>以上缺点，在 SVG 图标中均不存在。</p><h2 id="为什么不使用雪碧图的方式引用图标" tabindex="-1">为什么不使用雪碧图的方式引用图标？ <a class="header-anchor" href="#为什么不使用雪碧图的方式引用图标" aria-label="Permalink to &quot;为什么不使用雪碧图的方式引用图标？&quot;">​</a></h2><p>雪碧图、精灵图、SVG Sprite 指的都是一种方式，将多个图标合并到一个 SVG 中，然后通过 Symbol 标签来引用图标。</p><p>这种方式也存在以下缺点：</p><ol><li>图标文件过大，合并多个图标到一个 SVG 中，即使只使用一个图标也需要下载整个文件。</li><li>书写效率低，无法直接预览，需要通过 <code>&lt;use&gt;</code> 标签来引用图标。</li></ol><h2 id="推荐学习资源" tabindex="-1">推荐学习资源 <a class="header-anchor" href="#推荐学习资源" aria-label="Permalink to &quot;推荐学习资源&quot;">​</a></h2><ul><li><a href="https://www.iconfont.cn/help/detail?helptype=code" target="_blank" rel="noreferrer">Web 端使用-iconfont</a></li><li><a href="https://antfu.me/posts/journey-with-icons-continues" target="_blank" rel="noreferrer">Journey with Icons Continues</a></li></ul>`,69)]))}const u=s(l,[["render",o]]);export{g as __pageData,u as default};
