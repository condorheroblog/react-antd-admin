import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.B2IAv3se.js";const c=JSON.parse('{"title":"样式","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/fundamentals/style.md","filePath":"zh/guide/fundamentals/style.md","lastUpdated":1743249389000}'),e={name:"zh/guide/fundamentals/style.md"};function l(h,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="style" tabindex="-1">样式 <a class="header-anchor" href="#style" aria-label="Permalink to &quot;样式 {#style}&quot;">​</a></h1><p>项目使用 Vite 构建，建议先阅读 Vite CSS 相关文档：<a href="https://vite.dev/guide/features#css" target="_blank" rel="noreferrer">https://vite.dev/guide/features#css</a></p><p>除此之外，项目还采用了 CSS in JS 和原子化方案，分别对应的是 <a href="https://cssinjs.org/react-jss/" target="_blank" rel="noreferrer">react-jss</a> 和 <a href="https://tailwindcss.com/" target="_blank" rel="noreferrer">Tailwind CSS</a>。</p><p>一般来讲，我们推荐使用 Tailwind CSS 来书写 CSS，使用 <a href="https://cssinjs.org/react-jss/" target="_blank" rel="noreferrer">react-jss</a> 来覆盖 antd 组件的样式。</p><h2 id="导入-css-文件" tabindex="-1">导入 CSS 文件 <a class="header-anchor" href="#导入-css-文件" aria-label="Permalink to &quot;导入 CSS 文件&quot;">​</a></h2><p>项目中导入 <code>.css</code> 文件，Vite 将会把内容插入到 <code>&lt;style&gt;</code> 标签中。</p><h2 id="css-modules" tabindex="-1">CSS Modules <a class="header-anchor" href="#css-modules" aria-label="Permalink to &quot;CSS Modules&quot;">​</a></h2><blockquote><p>不推荐使用</p></blockquote><p>在 Vite 中任何以 <code>.module.css</code> 为后缀名的 CSS 文件都被认为是一个 <a href="https://github.com/css-modules/css-modules" target="_blank" rel="noreferrer">CSS modules</a> 文件。导入这样的文件会返回一个相应的模块对象。</p><div class="info custom-block"><p class="custom-block-title">example.module.css</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./example.module.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classes.red;</span></span></code></pre></div><h2 id="项目样式结构" tabindex="-1">项目样式结构 <a class="header-anchor" href="#项目样式结构" aria-label="Permalink to &quot;项目样式结构&quot;">​</a></h2><p>项目中的样式文件统一存放在 <code>src/styles</code> 目录下。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src/styles</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> styles</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                             # 样式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> animation.css</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # 动画相关</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> antdTheme.ts</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   # antd 主题</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base.css</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                       # 基础样式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> css-variables.ts</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # 获取 antd token 的 CSS 变量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> global.css</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     # 全局样式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.css</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # 样式入口文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keep-alive.css</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # keep-alive 样式</span></span></code></pre></div><h2 id="react-jss" tabindex="-1"><a href="https://cssinjs.org/react-jss/" target="_blank" rel="noreferrer">react-jss</a> <a class="header-anchor" href="#react-jss" aria-label="Permalink to &quot;[react-jss](https://cssinjs.org/react-jss/)&quot;">​</a></h2><p>如果样式不多，可以直接在组件中书写，如果样式较多，建议所有的样式提取到 style.tsx 文件中，然后通过 <code>useStyles</code> 引入到组件中。</p><div class="info custom-block"><p class="custom-block-title">style.ts</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createUseStyles } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react-jss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> useStyles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createUseStyles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		tabsContainer: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			backgroundColor: token.colorBgContainer,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			borderTop: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`1px solid \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">colorBorderSecondary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			borderBottom: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`1px solid \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">colorBorderSecondary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>createUseStyles 函数的 token 参数可以获取到 antd 的所有 token。</p></div><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useStyles } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tabs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> classes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStyles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{classes.tabsContainer}&gt;Tabs&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="tailwind-css" tabindex="-1"><a href="https://tailwindcss.com/" target="_blank" rel="noreferrer">Tailwind CSS</a> <a class="header-anchor" href="#tailwind-css" aria-label="Permalink to &quot;[Tailwind CSS](https://tailwindcss.com/)&quot;">​</a></h2><p>开箱即用，无需配置。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bg-red-500 text-white&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello World&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="bem" tabindex="-1">BEM <a class="header-anchor" href="#bem" aria-label="Permalink to &quot;BEM&quot;">​</a></h2><blockquote><p>不建议使用</p></blockquote><p>请考虑使用 <a href="https://tailwindcss.com/" target="_blank" rel="noreferrer">Tailwind CSS</a> 方案，避免类名焦虑和减少 CSS 代码。</p><h2 id="css-预处理器" tabindex="-1">CSS 预处理器 <a class="header-anchor" href="#css-预处理器" aria-label="Permalink to &quot;CSS 预处理器&quot;">​</a></h2><blockquote><p>不建议使用</p></blockquote><p>当想要使用 CSS 预处理器时，优先考虑使用 <a href="https://cssinjs.org/react-jss/" target="_blank" rel="noreferrer">react-jss</a> 方案，大部分情况下你不需要引入另外一种样式解决方案。</p>`,27)]))}const E=i(e,[["render",l]]);export{c as __pageData,E as default};
